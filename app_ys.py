# -*- coding: utf-8 -*-
"""App-YS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k-M224Y0OJv3gtc_zfH2aXcVI7sUjwJd
"""

import pandas as pd               #Tabular Data
import numpy as np                #Mathematical calculations & Arrays
import matplotlib.pyplot as plt   #Pot and customize charts
import seaborn as sns             #Advanced visualizations

df2=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Project Files/P_Dv3/Parameters_simulation.csv')
df2.head()

df2=df2.drop(columns=['laser_module'])
df2.head()

# Exclude 'yield_strength' from the descriptors
descriptors = [col for col in df2.columns if col != 'yield_strength']

# Get the feature matrix (X) and target vector (y)
X = df2[descriptors]
y = df2['yield_strength']

# Split into train and test sets
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import cross_val_score

# Use RandomForestRegressor because you are predicting a number
model = RandomForestRegressor()

# Perform 10-fold cross-validation
scores = cross_val_score(model, X, y, cv=20, scoring='r2')  # Use R² scoring

print(scores)
print("CV average:", round(scores.mean(), 4))
print("CV std. dev:", round(scores.std(), 4))

# Train the Random Forest Regressor
clf = RandomForestRegressor()
clf.fit(X_train, y_train)

# Evaluate the model
print("Test R² score:", clf.score(X_test, y_test))  # .score gives R² for regressors

clf = RandomForestRegressor()
clf.fit(X_train, y_train)

import joblib
joblib.dump(clf, "yield_strength_rf.pkl")   # save the trained model

# app.py  ------------------------------------------------------------
import streamlit as st

st.title("3-D Printer Yield-Strength Calculator")

# Load the trained model
model = joblib.load("yield_strength_rf.pkl")

# UI controls – one per process parameter
hatch       = st.number_input("Hatch spacing (µm)",        70.0, 110.0, 90.0)
power       = st.number_input("Laser beam power (W)",     300.0, 450.0, 360.0)
speed       = st.number_input("Laser beam speed (mm/s)", 1200.0, 1600.0, 1350.0)
spot        = st.number_input("Laser spot size (µm)",     110.0, 150.0, 127.0)
rotation    = st.number_input("Scan rotation (deg)",        0.0,  90.0,  65.0)
stripe      = st.number_input("Stripe width (mm)",          5.0,  20.0,   10.0)

if st.button("Predict yield strength"):
    X_new = np.array([[hatch, power, speed, spot, rotation, stripe]])
    y_pred = model.predict(X_new)[0]
    st.success(f"Predicted yield strength: **{y_pred:.1f} MPa**")